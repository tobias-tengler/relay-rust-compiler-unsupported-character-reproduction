schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

interface ParameterControl {
  uiControlType: ParameterUiControlType!
}

type ButtonControl implements ParameterControl {
  label: String
  uiControlType: ParameterUiControlType!
}

type ComboBoxControl implements ParameterControl {
  availableItems: [ComboBoxControlItem!]!
  uiControlType: ParameterUiControlType!
}

type ComboBoxControlItem {
  label: String!
  value: Int
}

type Device implements Node {
  id: ID!
  bmk: String!
  macAddress: String
  name: String!
  information: [DeviceInformation!]!
  parameters: [DeviceParameter!]!
}

type DeviceGraphEdge {
  deviceId: ID!
  type: DeviceGraphEdgeType!
}

type DeviceGraphNode {
  deviceId: ID!
  parentDeviceId: ID
  connections: [DeviceGraphEdge!]!
  device: Device!
  bmk: String!
  kind: DeviceKind!
}

type DeviceInformation {
  label: String!
  value: String!
}

type DeviceParameter implements Node {
  id: ID!
  name: String!
  unit: String
  canBeRead: Boolean!
  canBeWritten: Boolean!
  valueDataType: String!
  uiControl: ParameterControl!
  device: Device
  value: Any
}

type ExecuteParameterPayload {
  success: Boolean
}

type Mutation {
  setParameterValue(input: SetParameterValueInput!): SetParameterValuePayload!
  executeParameter(input: ExecuteParameterInput!): ExecuteParameterPayload!
}

type NumberBoxControl implements ParameterControl {
  minValue: Int
  maxValue: Int
  decimalPlaces: Int
  uiControlType: ParameterUiControlType!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  deviceGraphNodes: [DeviceGraphNode!]!
  parameter(paramterId: ID!): DeviceParameter
  device(deviceId: ID!): Device
  devices: [Device!]!
}

type RadioButtonControl implements ParameterControl {
  uiControlType: ParameterUiControlType!
}

type SetParameterValuePayload {
  parameter: DeviceParameter
}

type Subscription {
  test(parameterId: String!): ValuePayload!
}

type TextBoxControl implements ParameterControl {
  minLength: Int
  maxLength: Int
  uiControlType: ParameterUiControlType!
}

type TrendGraphControl implements ParameterControl {
  uiControlType: ParameterUiControlType!
  maxTicks: Int!
}

type ValuePayload {
  parameterId: String!
  value: Int!
}

input ExecuteParameterInput {
  parameterId: ID!
}

input SetParameterValueInput {
  parameterId: ID!
  value: Any
}

enum DeviceGraphEdgeType {
  CHILD
  DIRECT
}

enum DeviceKind {
  REGULAR
  INTERMEDIARY_DEVICE
}

enum ParameterUiControlType {
  TEXT_BOX
  NUMBER_BOX
  COMBO_BOX
  RADIO_BUTTON
  TREND_GRAPH
  BUTTON
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer(
  "If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to."
  label: String
  "Deferred when true."
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream(
  "If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to."
  label: String
  "The initial elements that shall be send down to the consumer."
  initialCount: Int! = 0
  "Streamed when true."
  if: Boolean
) on FIELD

scalar Any
